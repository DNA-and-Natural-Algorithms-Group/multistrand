ssystem.cc:  system_options = GlobalOptions;
ssystem.cc:    if( getLongAttr(system_options, parameter_type) == 0 ) // VIENNA = 0
ssystem.cc:      dnaEnergyModel = new ViennaEnergyModel( system_options );
ssystem.cc:      dnaEnergyModel = new NupackEnergyModel( system_options );
ssystem.cc:SimulationSystem::SimulationSystem( PyObject *system_options )
ssystem.cc:	  if(   getLongAttr(system_options, parameter_type) == 0 )
ssystem.cc:		dnaEnergyModel = new ViennaEnergyModel( system_options );
ssystem.cc:		dnaEnergyModel = new NupackEnergyModel( system_options );
ssystem.cc:  system_options->finalizeInput();
ssystem.cc:  int ointerval = getLongAttr(system_options, output_interval);
ssystem.cc:  int initial_seed = getLongAttr(system_options, initial_seed);
ssystem.cc:  if(getLongAttr(system_options, simulation_mode) & SIMULATION_PYTHON)
ssystem.cc:	system_options->resetCompleted_Python();
ssystem.cc:	system_options->setCollisionRate_Python( -1.0);
ssystem.cc:  if( getLongAttr(system_options, energy_mode) == 1 ) // need energy only.
ssystem.cc:  if( getLongAttr(system_options, simulation_mode) & SIMULATION_FIRST )
ssystem.cc:  while( curcount < getLongAttr(system_options, num_simulations) )
ssystem.cc:      if( ointerval < 0 && !(getLongAttr(system_options, simulation_mode) & SIMULATION_PYTHON))
ssystem.cc:      if( ointerval < 0 && !(getLongAttr(system_options, simulation_mode) & SIMULATION_PYTHON))
ssystem.cc:      if( getLongAttr(system_options, trajectory_type) > 0 )
ssystem.cc:	system_options->printTrajLine( NULL, curcount );
ssystem.cc:  double maxsimtime = getDoubleAttr(system_options, simulation_time);
ssystem.cc:  int stopcount = getLongAttr(system_options, stop_count);
ssystem.cc:  int stopoptions = getLongAttr(system_options, stop_options);
ssystem.cc:  int ointerval = getLongAttr(system_options, output_interval);
ssystem.cc:  int sMode = getLongAttr(system_options, simulation_mode); 
ssystem.cc:  double otime = getDoubleAttr(system_options, output_time);
ssystem.cc:  if( getLongAttr(system_options, trajectory_type) == 0)
ssystem.cc:	  system_options->setCurSimTime( stime );
ssystem.cc:		traverse = system_options->getStopComplexList( curcount );
ssystem.cc:	    if( getLongAttr(system_options, current_trajectory_suspend_flag))
ssystem.cc:		while( getLongAttr(system_options, current_trajectory_suspend_flag) )
ssystem.cc:	    if( getLongAttr(system_options, current_trajectory_halt_flag) )
ssystem.cc:	    if( getLongAttr(system_options, output_state) )
ssystem.cc:	    system_options->incrementOutputState();
ssystem.cc:	if( ointerval < 0 || getLongAttr(system_options, output_state) == 0)
ssystem.cc:	system_options->printStatusLine( r_seed, "ERROR", stime );
ssystem.cc:	system_options->printStatusLine( r_seed, traverse->tag, stime );
ssystem.cc:	system_options->printStatusLine( r_seed, "INCOMPLETE", stime );
ssystem.cc:  else if( getLongAttr(system_options, trajectory_type) == 1 )
ssystem.cc:	      traverse = system_options->getStopComplexList( curcount );
ssystem.cc:      system_options->printTrajLine("Start",0);
ssystem.cc:	    if( getLongAttr(system_options, output_state) )
ssystem.cc:	    system_options->incrementOutputState();
ssystem.cc:		traverse = system_options->getStopComplexList( curcount );
ssystem.cc:	    system_options->printTrajLine( traverse->tag, stime );
ssystem.cc:	  system_options->printTrajLine("NOSTATE", stime );
ssystem.cc:      if( ointerval < 0 || getLongAttr(system_options, output_state) == 0)
ssystem.cc:	system_options->printStatusLine( r_seed, "ERROR", stime );
ssystem.cc:	system_options->printStatusLine( r_seed, "INCOMPLETE", stime );
ssystem.cc:  int ointerval = getLongAttr(system_options, output_interval);
ssystem.cc:  int initial_seed = getLongAttr(system_options, initial_seed);
ssystem.cc:  int sMode = getLongAttr(system_options, simulation_mode) & SIMULATION_PYTHON;
ssystem.cc:  assert( getLongAttr(system_options, simulation_mode) & SIMULATION_FIRST );
ssystem.cc:  while( curcount < getLongAttr(system_options, num_simulations) )
ssystem.cc:      //      if( getLongAttr(system_options, trajectory_type) > 0 )
ssystem.cc:      //	system_options->printTrajLine( NULL, curcount );
ssystem.cc:      //system_options->resetCompleted();
ssystem.cc:      system_options->printStatusLine_First_Bimolecular( random_seed, completiontype, completiontime, forwardrate, tag );
ssystem.cc:    system_options->printStatusLine_Final_First_Bimolecular( total_rate, total_time, total_types, curcount, computed_rate_means, computed_rate_mean_diff_squared );
ssystem.cc:    system_options->printStatusLine_Warning( 0, total_types[2] );
ssystem.cc:  double maxsimtime = getDoubleAttr(system_options, simulation_time);
ssystem.cc:  int stopcount = getLongAttr(system_options, stop_count);
ssystem.cc:  int stopoptions = getLongAttr(system_options, stop_options);
ssystem.cc:  int ointerval = getLongAttr(system_options, output_interval);
ssystem.cc:  int sMode = getLongAttr(system_options, simulation_mode) & SIMULATION_PYTHON;
ssystem.cc:  int trajMode = getLongAttr(system_options, trajectory_type);
ssystem.cc:  double otime = getDoubleAttr(system_options, output_time);
ssystem.cc:  if( ointerval >= 0 || getDoubleAttr(system_options, output_time) > 0.0 )
ssystem.cc:  if( ointerval >= 0 || getDoubleAttr(system_options, output_time) > 0.0 )
ssystem.cc:    system_options->setCollisionRate_Python( *frate );
ssystem.cc:	  system_options->setCurSimTime( stime );
ssystem.cc:	    if( getLongAttr(system_options, output_state) )
ssystem.cc:	    system_options->incrementOutputState();
ssystem.cc:		traverse = system_options->getStopComplexList( curcount );
ssystem.cc:	    if( getLongAttr(system_options, current_trajectory_suspend_flag))
ssystem.cc:		while( getLongAttr(system_options, current_trajectory_suspend_flag) )
ssystem.cc:	    if( getLongAttr(system_options, current_trajectory_halt_flag) )
ssystem.cc:	system_options->printStatusLine( r_seed, "ERROR", stime );
ssystem.cc:	system_options->printStatusLine( r_seed, traverse->tag, stime );
ssystem.cc:	system_options->printStatusLine( r_seed, "INCOMPLETE", stime );
ssystem.cc:  sequence = system_options->getSequence( index );
ssystem.cc:      if ( getLongAttr(system_options, simulation_mode) == SIMULATION_FIRST_BIMOLECULAR )
ssystem.cc:	structure = system_options->getBoltzmannStructure( index );
ssystem.cc:	structure = system_options->getStructure( index );
ssystem.cc:      id = system_options->getID_list( index );
ssystem.cc:      sequence = system_options->getSequence( index );
