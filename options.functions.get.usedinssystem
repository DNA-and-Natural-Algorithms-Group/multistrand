ssystem.cc:    if( system_options->getParameterType() == 0 ) // VIENNA = 0
ssystem.cc:  int ointerval = system_options->getOutputInterval();
ssystem.cc:  int initial_seed = system_options->getInitialSeed();
ssystem.cc:  if(system_options->getSimulationMode() & SIMULATION_PYTHON)
ssystem.cc:  if( system_options->getEnergyMode() == 1 ) // need energy only.
ssystem.cc:  if( system_options->getSimulationMode() & SIMULATION_FIRST )
ssystem.cc:  while( curcount < system_options->getNumSimulations() )
ssystem.cc:      if( ointerval < 0 && !(system_options->getSimulationMode() & SIMULATION_PYTHON))
ssystem.cc:      if( ointerval < 0 && !(system_options->getSimulationMode() & SIMULATION_PYTHON))
ssystem.cc:      if( system_options->getTrajectoryType() > 0 )
ssystem.cc:  double maxsimtime = system_options->getSimulationTime();
ssystem.cc:  int stopcount = system_options->getStopCount();
ssystem.cc:  int stopoptions = system_options->getStopOptions();
ssystem.cc:  int ointerval = system_options->getOutputInterval();
ssystem.cc:  int sMode = system_options->getSimulationMode(); 
ssystem.cc:  double otime = system_options->getOutputTime();
ssystem.cc:  if( system_options->getTrajectoryType() == 0)
ssystem.cc:		traverse = system_options->getStopComplexList( curcount );
ssystem.cc:	    if( system_options->getCurrentTrajectorySuspendFlag())
ssystem.cc:		while( system_options->getCurrentTrajectorySuspendFlag() )
ssystem.cc:	    if( system_options->getCurrentTrajectoryHaltFlag() )
ssystem.cc:	    if( system_options->getOutputState() )
ssystem.cc:	if( ointerval < 0 || system_options->getOutputState() == 0)
ssystem.cc:  else if( system_options->getTrajectoryType() == 1 )
ssystem.cc:	      traverse = system_options->getStopComplexList( curcount );
ssystem.cc:	    if( system_options->getOutputState() )
ssystem.cc:		traverse = system_options->getStopComplexList( curcount );
ssystem.cc:      if( ointerval < 0 || system_options->getOutputState() == 0)
ssystem.cc:  int ointerval = system_options->getOutputInterval();
ssystem.cc:  int initial_seed = system_options->getInitialSeed();
ssystem.cc:  int sMode = system_options->getSimulationMode() & SIMULATION_PYTHON;
ssystem.cc:  assert( system_options->getSimulationMode() & SIMULATION_FIRST );
ssystem.cc:  while( curcount < system_options->getNumSimulations() )
ssystem.cc:      //      if( system_options->getTrajectoryType() > 0 )
ssystem.cc:  double maxsimtime = system_options->getSimulationTime();
ssystem.cc:  int stopcount = system_options->getStopCount();
ssystem.cc:  int stopoptions = system_options->getStopOptions();
ssystem.cc:  int ointerval = system_options->getOutputInterval();
ssystem.cc:  int sMode = system_options->getSimulationMode() & SIMULATION_PYTHON;
ssystem.cc:  int trajMode = system_options->getTrajectoryType();
ssystem.cc:  double otime = system_options->getOutputTime();
ssystem.cc:  if( ointerval >= 0 || system_options->getOutputTime() > 0.0 )
ssystem.cc:  if( ointerval >= 0 || system_options->getOutputTime() > 0.0 )
ssystem.cc:	    if( system_options->getOutputState() )
ssystem.cc:		traverse = system_options->getStopComplexList( curcount );
ssystem.cc:	    if( system_options->getCurrentTrajectorySuspendFlag())
ssystem.cc:		while( system_options->getCurrentTrajectorySuspendFlag() )
ssystem.cc:	    if( system_options->getCurrentTrajectoryHaltFlag() )
ssystem.cc:  sequence = system_options->getSequence( index );
ssystem.cc:      if ( system_options->getSimulationMode() == SIMULATION_FIRST_BIMOLECULAR )
ssystem.cc:	structure = system_options->getBoltzmannStructure( index );
ssystem.cc:	structure = system_options->getStructure( index );
ssystem.cc:      id = system_options->getID_list( index );
ssystem.cc:      sequence = system_options->getSequence( index );
NupackEnergyModel::NupackEnergyModel( Options *options ) : log_loop_penalty_37(107.856) , kinetic_rate_method(2) , bimolecular_penalty(196), kBoltzmann(.00198717),current_temp(310.15), gtenable(0) // Check references for this loop penalty term.
  current_temp = temperature = options->getTemperature();
  dangles = options->getDangles();
  ptype = options->getParameterType();
  logml = options->getLogML();
  kinetic_rate_method = options->getRateMethod();
  if( options->getEnergyModel() == 0 )
      fp = fopen( options->getParameterFile(), "rt");
	  fprintf(stderr,"ERROR: Bad Parameter Filename: %s not found in path.\n", options->getParameterFile() );
  else if( options->getEnergyModel() == NUPACKDNA23 )
  else if( options->getEnergyModel() == NUPACKRNA23 )
      if( options->getTemperature() < 37.0 - .0001 || options->getTemperature() > 37.0 + .0001)
	  fprintf(stderr,"ERROR: Temperature was set to %0.2lf C, but only dG type data files could be found. Please ensure that the requested parameter set has both .dG and .dH files!\n",options->getTemperature());
  //  double temperature = options->getTemperature();
      setupRates( options );  
  setupRates( options );  
